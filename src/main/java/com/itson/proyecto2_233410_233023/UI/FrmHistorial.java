/**
 * Clase Historial.java creada el 29/03/2023.
 */
package com.itson.proyecto2_233410_233023.UI;

import com.itson.proyecto2_233410_233023.dominio.*;
import com.itson.proyecto2_233410_233023.implementaciones.*;
import com.itson.proyecto2_233410_233023.interfaces.*;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Frame que permite visualizar los trámites que ha realizado una persona,
 * utilizando distintos filtros de búsqueda.
 *
 * @author Gabriel x Kim
 */
public class FrmHistorial extends javax.swing.JFrame {

    /**
     * Atributo que ayuda a utilizar aquellos métodos para la búsqueda de
     * personas.
     */
    IPersonasDAO personasDAO;
    /**
     * Atributo que ayuda a autilizar aquellos métodos para los vehículos que
     * tiene una persona.
     */
    IVehiculosDAO vehiculosDAO;
    /**
     * Atributo que ayuda a utilizar aquellos métodos para consultar los
     * trámites realizados por una persona.
     */
    ITramitesDAO tramitesDAO;
    /**
     * Atributo que representa a la persona de la cual se quiere conocer el
     * historial.
     */
    private Persona personaSeleccionada;
    ;
    
    /**
     * Atributo que sirve para validar los valores ingresados por el usario,
     * para verificar que su formato sea correcto.
     */
    private Validador validador = new Validador();
    /**
     * Objeto para llenar la combo box con las personas correspondientes.
     */
    DefaultComboBoxModel<Persona> modeloComboBox = new DefaultComboBoxModel<Persona>();

    /**
     * Contructor para crear un FrmHistorial.
     *
     * @param personasDAO Atributo que ayuda a utilizar aquellos métodos para la
     * búsqueda de personas.
     * @param tramitesDAO Atributo que ayuda a utilizar aquellos métodos para
     * consultar los trámites realizados por una persona.
     */
    public FrmHistorial(IPersonasDAO personasDAO, ITramitesDAO tramitesDAO) {
        initComponents();
        this.tramitesDAO = tramitesDAO;
        this.personasDAO = personasDAO;
        //se desactivan los campos de texto
        txtRfc.setEnabled(false);
        txtNombres.setEnabled(false);
        dtpFechaNacimiento.setEnabled(false);
        txtNombresReporte.setEnabled(false);
        jPanelFondoReporte.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    /**
     * Método para mostrar un mensaje en pantalla, recibe una cadena de texto la
     * cual es la que se desea mostrar en el mensaje informativo.
     */
    private void mostrarMensaje(String msj) {
        JOptionPane.showMessageDialog(null, msj, "Info", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Método que obtiene el rfc que el usuario escribió en el campo de texto.
     *
     * @return la cadena con el rfc en caso de no estar vacía de lo contrario
     * regresa null.
     */
    private String obtenerRFC() {
        String rfc = txtRfc.getText();
        try {
            validador.validaRFC(rfc);
            return rfc;
        } catch (PersistenciaException ex) {
            mostrarMensaje(ex.getMessage());
        }

        return null;
    }

    /**
     * Método que obtiene el nombre que el usuario escribió en el campo de texto
     *
     * @return la cadena con el nombre en caso de no estar vacía de lo contrario
     * regresa null.
     */
    private String obtenerNombres() {
        String nombres = txtNombres.getText();
        try {
            validador.validaNombre(nombres);
            return nombres;
        } catch (PersistenciaException ex) {
            mostrarMensaje(ex.getMessage());
        }

        return null;
    }

    private String obtenerFechaInicio() {
        return dtpFechaDe.getText();
    }

    private String obtenerFechaFin() {
        return dptFechaHasta.getText();
    }

    private String obtenerFechaNacimiento() {
        return dtpFechaNacimiento.getText();
    }

    private String obtenerNombresReporte() {
        String nombres = txtNombresReporte.getText();
        try {
            validador.validaNombre(nombres);
            return nombres;
        } catch (PersistenciaException ex) {
            mostrarMensaje(ex.getMessage());
        }

        return null;
    }

    /**
     * Método que obtiene fecha de nacimiento que el usuario seleccionó en el
     * campo de texto y la transforma en un string.
     *
     * @return la cadena con la fecha de nacimiento en caso de no estar vacía de
     * lo contrario regresa null.
     */
    private String validarYFormatearFecha(String fechaTexto) {
        try {
            String fechaFormateada = null;
            validador.validaFechaNacimientoTexto(fechaTexto);
            int indiceEspacio = fechaTexto.indexOf(" ");
            if (indiceEspacio >= 0 && indiceEspacio < fechaTexto.length()) {
                String caracteresAntesEspacio = fechaTexto.substring(0, indiceEspacio);
                int cantidadCaracteres = caracteresAntesEspacio.length();
                if (cantidadCaracteres == 1) {
                    fechaTexto = "0" + fechaTexto;
                }
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd 'de' MMMM 'de' yyyy", new Locale("es", "ES"));
                LocalDate fecha = LocalDate.parse(fechaTexto, formatter);
                fechaFormateada = fecha.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                validador.validaFechaNacimiento(fechaFormateada);
                return fechaFormateada;
            }
        } catch (Exception ex) {
            mostrarMensaje(ex.getMessage());
        }
        return null;
    }

    /**
     * Método que se encarga de llenar la combo box de personas con aquellas.
     *
     * @throws PersistenciaException si se presento un error al llenado.
     */
    private void cargarComboBoxPersonas() throws PersistenciaException {
        List<Persona> personas = casillasActivas();       // recibe la lista de personas a agregar a la combo box
        if (personas == null || personas.isEmpty()) {     // si la lista esta vacia no pone nada en la tabla
            DefaultTableModel model = (DefaultTableModel) tblHistorial.getModel();
            model.setRowCount(0);
        } else {                                          // si la lista no esta vacia llena el combo box con las personas de la lista
            for (Persona persona : personas) {
                modeloComboBox.addElement(persona);
            }
            cbxPersonas.setModel(modeloComboBox);
        }
    }

    /**
     * Método que se utiliza para clasificar que tipo de trámite es, de licencia
     * o de placas.
     *
     * @param tramite el trámite que se desea clasificar.
     * @return el tipo de trámite al que corresponde el parametro.
     */
    private String definirTipoTramite(Tramite tramite) {
        String tipo = null;
        List<Tramite> tramites = tramitesDAO.consultarColumnaTipoTramite();
        if (tramite instanceof TramiteLicencia) {
            tipo = "TramiteLicencia";
        } else if (tramite instanceof TramitePlaca) {
            tipo = "TramitePlaca";
        }
        return tipo;
    }

    /**
     * Métdo encargado de transformar una fecha Calendar a un String.
     *
     * @param fecha en objeto Calendar.
     * @return fecha en objeto String.
     */
    private String fechaCalendarAString(Calendar fecha) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Crear un objeto SimpleDateFormat con el formato deseado
        String fechaString = sdf.format(fecha.getTime()); // Formatear la fecha del calendario y convertirla a una cadena de texto 
        return fechaString;
    }

    /**
     * Método que se encarga de llenar la tabla de trámites que una persona ha
     * realizado dependiendo de los que se desea conocer.
     *
     * @param tipoTramite el tipo de tramite que se desea mostrar en la tabla.
     */
    private void cargarTablaTipoTramites(String tipoTramite) {
        if (personaSeleccionada != null) {
            List<Tramite> tramitesPersonaSeleccionada = personaSeleccionada.getTramites();
            DefaultTableModel modeloTablaPersonas = (DefaultTableModel) this.tblHistorial.getModel();
            modeloTablaPersonas.setRowCount(0);
            for (int i = 0; i < tramitesPersonaSeleccionada.size(); i++) {
                Tramite tramite = tramitesPersonaSeleccionada.get(i);
                String fechaExpedicion = fechaCalendarAString(tramite.getFechaExpedicion());
                if (definirTipoTramite(tramite).equals(tipoTramite)) {
                    Object[] filaNueva = {personaSeleccionada.getNombre() + " " + personaSeleccionada.getApellidoPaterno(), tipoTramite,
                        fechaExpedicion, "$ " + tramite.getCosto()};
                    modeloTablaPersonas.addRow(filaNueva);
                }

            }
        }
    }

    /**
     * Método que carga la tabla de trámites con ambos tipos de trámites que la
     * persona realizó.
     */
    private void cargarTablaTramites() {
        if (personaSeleccionada != null) {
            List<Tramite> tramitesPersonaSeleccionada = personaSeleccionada.getTramites();
            DefaultTableModel modeloTablaPersonas = (DefaultTableModel) this.tblHistorial.getModel();
            modeloTablaPersonas.setRowCount(0);
            for (int i = 0; i < tramitesPersonaSeleccionada.size(); i++) {
                Tramite tramite = tramitesPersonaSeleccionada.get(i);
                String fechaExpedicion = fechaCalendarAString(tramite.getFechaExpedicion());
                Object[] filaNueva = {personaSeleccionada.getNombre() + " " + personaSeleccionada.getApellidoPaterno(), definirTipoTramite(tramite),
                    fechaExpedicion, "$ " + tramite.getCosto()};
                modeloTablaPersonas.addRow(filaNueva);
            }
        }
    }

    private void verificarRegistros(List<Tramite> tramites) {
        if (tblHistorial.getModel().getRowCount() <= 0 && !dtpFechaDe.getText().isEmpty()
                && !dptFechaHasta.getText().isEmpty() && !txtNombresReporte.getText().isEmpty()) {
            mostrarMensaje("No se encontraron registros");
        }
    }

    /**
     * Método que carga los trámites que ha realizado una persona dentro de un
     * periodo de tiempo y dependiendo del tipo de trámite que se desea ver.
     *
     * @param tipoTramite trámite que se desea presentar en la tabla.
     * @throws PersistenciaException si existe un error al cargar la tabla.
     */
    private void cargarTablaPeriodoTramitesPorTipo(String tipoTramite) throws PersistenciaException {
        String fechaInicio = validarYFormatearFecha(obtenerFechaInicio());
        String fechaFin = validarYFormatearFecha(obtenerFechaFin());
        DefaultTableModel modeloTablaPersonas = (DefaultTableModel) this.tblHistorial.getModel();
        modeloTablaPersonas.setRowCount(0);
//        if (personaSeleccionada != null) {
//            List<Tramite> tramitesPersonaSeleccionada = personaSeleccionada.getTramites();
//            for (int i = 0; i < tramitesPersonaSeleccionada.size(); i++) {
//                if (fechaInicio != null && fechaFin != null) {
//                    List<Tramite> tramitesPeriodo = tramitesDAO.periodoFechaTramite(fechaInicio, fechaFin);
//                    Tramite tramite = tramitesPersonaSeleccionada.get(i);
//                    if (tramitesPeriodo.contains(tramite)) {
//                        String fechaExpedicion = fechaCalendarAString(tramite.getFechaExpedicion());
//                        if (definirTipoTramite(tramite).equals(tipoTramite)) {
//                            Object[] filaNueva = {personaSeleccionada.getNombre() + " " + personaSeleccionada.getApellidoPaterno(), definirTipoTramite(tramite),
//                                fechaExpedicion, "$ " + tramite.getCosto()};
//                            modeloTablaPersonas.addRow(filaNueva);
//
//                        }
//                    }
//                }
//            }
//        } else {
        List<Persona> personas = casillasActivas();
        List<Tramite> tramites = new ArrayList<Tramite>();
        for (int i = 0; i < personas.size(); i++) {
            tramites.addAll(personas.get(i).getTramites());
        }

        for (int i = 0; i < tramites.size(); i++) {
            List<Tramite> tramitesPeriodo = tramitesDAO.periodoFechaTramite(fechaInicio, fechaFin);
            Tramite tramite = tramites.get(i);
            if (tramitesPeriodo.contains(tramite)) {
                String fechaExpedicion = fechaCalendarAString(tramite.getFechaExpedicion());
                if (definirTipoTramite(tramite).equals(tipoTramite)) {
                    Object[] filaNueva = {tramite.getPersona().getNombre() + " " + tramite.getPersona().getApellidoPaterno(), definirTipoTramite(tramite),
                        fechaExpedicion, "$ " + tramite.getCosto()};
                    modeloTablaPersonas.addRow(filaNueva);
                }
            }
        }
        verificarRegistros(tramites);
//        }
    }

    /**
     * * Método que carga los trámites que ha realizado una persona dentro de
     * un periodo de tiempo sin importar el tipo de trámite.
     *
     * @throws PersistenciaException si hubo un error al cargar la tabla
     */
    private void cargarTablaPeriodoTramites() throws PersistenciaException {
        String fechaInicio = validarYFormatearFecha(obtenerFechaInicio());
        String fechaFin = validarYFormatearFecha(obtenerFechaFin());
        DefaultTableModel modeloTablaPersonas = (DefaultTableModel) this.tblHistorial.getModel();
        modeloTablaPersonas.setRowCount(0);
//        if (personaSeleccionada != null) {
//            List<Tramite> tramitesPersonaSeleccionada = personaSeleccionada.getTramites();
//            for (int i = 0; i < tramitesPersonaSeleccionada.size(); i++) {
//                if (fechaInicio != null && fechaFin != null) {
//                    List<Tramite> tramitesPeriodo = tramitesDAO.periodoFechaTramite(fechaInicio, fechaFin);
//                    Tramite tramite = tramitesPersonaSeleccionada.get(i);
//                    if (tramitesPeriodo.contains(tramite)) {
//                        String fechaExpedicion = fechaCalendarAString(tramite.getFechaExpedicion());
//                        Object[] filaNueva = {personaSeleccionada.getNombre() + " " + personaSeleccionada.getApellidoPaterno(), tramite,
//                            fechaExpedicion, "$ " + tramite.getCosto()};
//                        modeloTablaPersonas.addRow(filaNueva);
//                    }
//                }
//            }
//        } else {
        List<Persona> personas = casillasActivas();
        List<Tramite> tramites = new ArrayList<Tramite>();
        for (int i = 0; i < personas.size(); i++) {
            tramites.addAll(personas.get(i).getTramites());
        }

        for (int i = 0; i < tramites.size(); i++) {
            List<Tramite> tramitesPeriodo = tramitesDAO.periodoFechaTramite(fechaInicio, fechaFin);
            Tramite tramite = tramites.get(i);
            if (tramitesPeriodo.contains(tramite)) {
                String fechaExpedicion = fechaCalendarAString(tramite.getFechaExpedicion());
                Object[] filaNueva = {tramite.getPersona().getNombre() + " " + tramite.getPersona().getApellidoPaterno(), tramite.getClass().getSimpleName(),
                    fechaExpedicion, "$ " + tramite.getCosto()};
                modeloTablaPersonas.addRow(filaNueva);
            }
        }
        verificarRegistros(tramites);
//        }
    }

    /**
     * Método que sirve para conocer que casillas de filtros están activas para
     * asi poder aplicar las búsquedas correspondidas, además de que valida que
     * lo ingresado en los txt tenga buen formato.
     *
     * @return la lista de personas cuyos datos coincidan con los datos de los
     * filtros seleccionados.
     * @throws PersistenciaException si hubo un error en obtener los datos de
     * las casillas.
     */
    private List<Persona> casillasActivas() throws PersistenciaException {
        List<Persona> personas = null;
        String rfcObtenido = null;
        String nombresObtenidos = null;
        String fechaNacimientoObtenida = null;
        String nombresReporteObtenidos = null;
        // Verificar cuáles JCheckBox están seleccionados
        boolean rfc = jcbRfc.isSelected();
        boolean nombres = jcbNombres.isSelected();
        boolean fechaNacimiento = jcbFechaNacimiento.isSelected();
        boolean nombresReporte = jcbReporte.isSelected();

        if (rfc) {
            rfcObtenido = obtenerRFC();
        }
        if (nombres) {
            nombresObtenidos = obtenerNombres();
        }
        if (fechaNacimiento) {
            fechaNacimientoObtenida = validarYFormatearFecha(obtenerFechaNacimiento());
        }

        //obtiene los datos de los txt para cada filtro
        PersonasDTO personasDTO = new PersonasDTO(rfcObtenido, nombresObtenidos, fechaNacimientoObtenida);
        // Aplicar el filtro correspondiente
        if (rfc && nombres && fechaNacimiento) {
            personas = personasDAO.consultarPersonasTresFiltro(personasDTO);
        } else if (rfc && nombres) {
            // Aplicar los filtros 1 y 2
            personas = personasDAO.consultarPersonasDosFiltro(personasDTO, "rfc", "nombre");
        } else if (rfc && fechaNacimiento) {
            // Aplicar los filtros 1 y 3
            personas = personasDAO.consultarPersonasDosFiltro(personasDTO, "rfc", "fechaNacimiento");
        } else if (nombres && fechaNacimiento) {
            // Aplicar los filtros 2 y 3
            personas = personasDAO.consultarPersonasDosFiltro(personasDTO, "fechaNacimiento", "nombre");
        } else {
            personas = personasDAO.consultarPersonasUnFiltro(personasDTO);
            if (nombresReporte) {
                nombresReporteObtenidos = obtenerNombresReporte();
                PersonasDTO personasReporteDTO = new PersonasDTO(nombresReporteObtenidos);
                personas = personasDAO.consultarPersonasUnFiltro(personasReporteDTO);
            }
        }
        return personas;
    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFondoMenu = new javax.swing.JPanel();
        jToolBarMenu = new javax.swing.JToolBar();
        jPanelBarra = new javax.swing.JPanel();
        btnVolver = new javax.swing.JButton();
        lblHistorial = new javax.swing.JLabel();
        cbxTipoTramite = new javax.swing.JComboBox<>();
        lblTipoTramite = new javax.swing.JLabel();
        lblHistorialSolicitudes = new javax.swing.JLabel();
        txtRfc = new javax.swing.JTextField();
        btnAplicarFiltros = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jcbRfc = new javax.swing.JCheckBox();
        jcbNombres = new javax.swing.JCheckBox();
        txtNombres = new javax.swing.JTextField();
        jcbFechaNacimiento = new javax.swing.JCheckBox();
        dtpFechaNacimiento = new com.github.lgooddatepicker.components.DatePicker();
        lblBuscar1 = new javax.swing.JLabel();
        cbxPersonas = new javax.swing.JComboBox<>();
        lblListaPersonas = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistorial = new javax.swing.JTable();
        jcbReporte = new javax.swing.JCheckBox();
        lblHistorialSolicitudes1 = new javax.swing.JLabel();
        jPanelFondoReporte = new javax.swing.JPanel();
        lblFiltroFecha = new javax.swing.JLabel();
        lblDe = new javax.swing.JLabel();
        dtpFechaDe = new com.github.lgooddatepicker.components.DatePicker();
        lblHasta = new javax.swing.JLabel();
        dptFechaHasta = new com.github.lgooddatepicker.components.DatePicker();
        lblNombresReporte = new javax.swing.JLabel();
        txtNombresReporte = new javax.swing.JTextField();
        btnFiltart = new javax.swing.JButton();
        btnGenerarReporte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Autopapeleo Menú ");
        setBackground(new java.awt.Color(233, 219, 253));
        setName("frmMenu"); // NOI18N
        setResizable(false);

        jPanelFondoMenu.setBackground(new java.awt.Color(233, 219, 253));
        jPanelFondoMenu.setForeground(new java.awt.Color(233, 219, 253));
        jPanelFondoMenu.setPreferredSize(new java.awt.Dimension(600, 400));

        jToolBarMenu.setRollover(true);
        jToolBarMenu.setBackground(new java.awt.Color(233, 219, 253));
        jToolBarMenu.setBorder(null);
        jToolBarMenu.setForeground(new java.awt.Color(233, 219, 253));

        jPanelBarra.setBackground(new java.awt.Color(129, 0, 127));
        jPanelBarra.setForeground(new java.awt.Color(129, 0, 127));
        jPanelBarra.setToolTipText("");

        btnVolver.setText("Volver");
        btnVolver.setBorder(null);
        btnVolver.setBorderPainted(false);
        btnVolver.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(124, 63, 163));
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        lblHistorial.setText("Historial");
        lblHistorial.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblHistorial.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanelBarraLayout = new javax.swing.GroupLayout(jPanelBarra);
        jPanelBarra.setLayout(jPanelBarraLayout);
        jPanelBarraLayout.setHorizontalGroup(
            jPanelBarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBarraLayout.createSequentialGroup()
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHistorial)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBarraLayout.setVerticalGroup(
            jPanelBarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnVolver, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addComponent(lblHistorial))
        );

        cbxTipoTramite.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Placas", "Licencias", "Ambos" }));
        cbxTipoTramite.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        cbxTipoTramite.setForeground(new java.awt.Color(124, 63, 163));
        cbxTipoTramite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoTramiteActionPerformed(evt);
            }
        });

        lblTipoTramite.setText("Tipo de trámite");
        lblTipoTramite.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblTipoTramite.setForeground(new java.awt.Color(124, 63, 163));

        lblHistorialSolicitudes.setText("Historial de solicitudes");
        lblHistorialSolicitudes.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblHistorialSolicitudes.setForeground(new java.awt.Color(124, 63, 163));

        txtRfc.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N

        btnAplicarFiltros.setText("Aplicar filtros");
        btnAplicarFiltros.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(124, 63, 163)));
        btnAplicarFiltros.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        btnAplicarFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarFiltrosActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(129, 0, 127));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );

        jcbRfc.setText("RFC");
        jcbRfc.setBackground(new java.awt.Color(233, 219, 253));
        jcbRfc.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        jcbRfc.setForeground(new java.awt.Color(124, 63, 163));
        jcbRfc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRfcActionPerformed(evt);
            }
        });

        jcbNombres.setText("Nombres");
        jcbNombres.setBackground(new java.awt.Color(233, 219, 253));
        jcbNombres.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        jcbNombres.setForeground(new java.awt.Color(124, 63, 163));
        jcbNombres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbNombresActionPerformed(evt);
            }
        });

        txtNombres.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N

        jcbFechaNacimiento.setText("Fecha de nacimiento");
        jcbFechaNacimiento.setBackground(new java.awt.Color(233, 219, 253));
        jcbFechaNacimiento.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        jcbFechaNacimiento.setForeground(new java.awt.Color(124, 63, 163));
        jcbFechaNacimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFechaNacimientoActionPerformed(evt);
            }
        });

        dtpFechaNacimiento.setBackground(new java.awt.Color(233, 219, 253));

        lblBuscar1.setText("Buscar por:");
        lblBuscar1.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblBuscar1.setForeground(new java.awt.Color(124, 63, 163));

        cbxPersonas.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        cbxPersonas.setForeground(new java.awt.Color(124, 63, 163));
        cbxPersonas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPersonasActionPerformed(evt);
            }
        });

        lblListaPersonas.setText("Lista de personas que coinciden");
        lblListaPersonas.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblListaPersonas.setForeground(new java.awt.Color(124, 63, 163));

        tblHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Tipo trámite", "Fecha", "Costo"
            }
        ));
        tblHistorial.setBackground(new java.awt.Color(233, 219, 253));
        jScrollPane1.setViewportView(tblHistorial);

        jcbReporte.setBackground(new java.awt.Color(233, 219, 253));
        jcbReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbReporteActionPerformed(evt);
            }
        });

        lblHistorialSolicitudes1.setText("Activar modo reporte");
        lblHistorialSolicitudes1.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblHistorialSolicitudes1.setForeground(new java.awt.Color(124, 63, 163));

        jPanelFondoReporte.setBackground(new java.awt.Color(233, 219, 253));
        jPanelFondoReporte.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelFondoReporte.setForeground(new java.awt.Color(233, 219, 253));

        lblFiltroFecha.setText("Filtro de fecha");
        lblFiltroFecha.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblFiltroFecha.setForeground(new java.awt.Color(124, 63, 163));

        lblDe.setText("De:");
        lblDe.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblDe.setForeground(new java.awt.Color(124, 63, 163));

        dtpFechaDe.setBackground(new java.awt.Color(233, 219, 253));

        lblHasta.setText("Hasta:");
        lblHasta.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblHasta.setForeground(new java.awt.Color(124, 63, 163));

        dptFechaHasta.setBackground(new java.awt.Color(233, 219, 253));

        lblNombresReporte.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        lblNombresReporte.setForeground(new java.awt.Color(124, 63, 163));
        lblNombresReporte.setText("Nombres");

        btnFiltart.setText("Filtrar");
        btnFiltart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(124, 63, 163)));
        btnFiltart.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        btnFiltart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltartActionPerformed(evt);
            }
        });

        btnGenerarReporte.setText("Generar reporte");
        btnGenerarReporte.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(124, 63, 163)));
        btnGenerarReporte.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFondoReporteLayout = new javax.swing.GroupLayout(jPanelFondoReporte);
        jPanelFondoReporte.setLayout(jPanelFondoReporteLayout);
        jPanelFondoReporteLayout.setHorizontalGroup(
            jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFondoReporteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelFondoReporteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFiltart, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelFondoReporteLayout.createSequentialGroup()
                        .addComponent(lblNombresReporte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombresReporte))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelFondoReporteLayout.createSequentialGroup()
                        .addComponent(lblHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dptFechaHasta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelFondoReporteLayout.createSequentialGroup()
                        .addComponent(lblFiltroFecha)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelFondoReporteLayout.createSequentialGroup()
                        .addComponent(lblDe, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(dtpFechaDe, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        jPanelFondoReporteLayout.setVerticalGroup(
            jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFondoReporteLayout.createSequentialGroup()
                .addComponent(lblFiltroFecha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDe)
                    .addComponent(dtpFechaDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHasta)
                    .addComponent(dptFechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombresReporte)
                    .addComponent(txtNombresReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFondoReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFiltart)
                    .addComponent(btnGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelFondoMenuLayout = new javax.swing.GroupLayout(jPanelFondoMenu);
        jPanelFondoMenu.setLayout(jPanelFondoMenuLayout);
        jPanelFondoMenuLayout.setHorizontalGroup(
            jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBarMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jcbRfc)
                                .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                                    .addComponent(lblTipoTramite)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cbxTipoTramite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jcbNombres)
                                .addComponent(txtRfc)
                                .addComponent(txtNombres)
                                .addComponent(jcbFechaNacimiento)
                                .addComponent(dtpFechaNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblBuscar1)))
                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnAplicarFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxPersonas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                        .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblListaPersonas)
                            .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                                .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHistorialSolicitudes, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                                        .addGap(85, 85, 85)
                                        .addComponent(jcbReporte)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblHistorialSolicitudes1))
                                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanelFondoReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelFondoMenuLayout.setVerticalGroup(
            jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                .addComponent(jPanelBarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxTipoTramite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTipoTramite))
                        .addGap(18, 18, 18)
                        .addComponent(lblBuscar1)
                        .addGap(18, 18, 18)
                        .addComponent(jcbRfc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtRfc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtpFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnAplicarFiltros)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblListaPersonas)
                        .addGap(7, 7, 7)
                        .addComponent(cbxPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToolBarMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jcbReporte)
                                    .addComponent(lblHistorialSolicitudes1)))
                            .addGroup(jPanelFondoMenuLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHistorialSolicitudes)))
                        .addGap(12, 12, 12)
                        .addGroup(jPanelFondoMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelFondoReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(137, 137, 137))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFondoMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondoMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondoMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que sirve para defnir el tipo de trámites que se desea ver en la
     * tabla, funciona a través de un combo box que te permite elegir entre los
     * trámites de licencias, placas o de ambos.
     *
     * @return regresa el tipo de tramite que fe seleccionado.
     */
    private String filtroComboBoxTipo() {
        String selectedValue = (String) cbxTipoTramite.getSelectedItem();
        personaSeleccionada = (Persona) cbxPersonas.getSelectedItem();
        if (selectedValue.contains("Ambos")) {
            cargarTablaTramites();  // carga todos los tramites
            return "Ambos";
        } else if (selectedValue.contains("Licencias")) {
            cargarTablaTipoTramites("TramiteLicencia"); // carga solamente los tramites de licencias 
            return "Licencias";
        } else if (selectedValue.contains("Placas")) { //carga solamente los tramites de placas
            cargarTablaTipoTramites("TramitePlaca");
            return "TramitePlaca";
        }
        return null;
    }

    public void filtrarConsultasPeriodo() throws PersistenciaException {
        if (dtpFechaDe.getText().isEmpty() && dptFechaHasta.getText().isEmpty() && txtNombresReporte.getText().isEmpty()) {
            mostrarMensaje("No hay datos que buscar");
        } else {
            DefaultTableModel model = (DefaultTableModel) tblHistorial.getModel();
            model.setRowCount(0);
            if (filtroComboBoxTipo().equals("Ambos")) {
                cargarTablaPeriodoTramites();
            } else if (filtroComboBoxTipo().equals("Licencias")) {
                cargarTablaPeriodoTramitesPorTipo("TramiteLicencia");
            } else {
                cargarTablaPeriodoTramitesPorTipo("TramitePlaca");
            }
        }
    }

    /**
     * Botón que se utiliza para volver al menú.
     *
     * @param evt el click que se le da al botón.
     */
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        FrmMenu frmm = new FrmMenu(personasDAO, vehiculosDAO, tramitesDAO);
        this.setVisible(false);
        frmm.setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * Botón para actualizar los datos del combo box dependiendo de los filtros
     * seleccionaos.
     *
     * @param evt el click que se le da al botón.
     */
    private void btnAplicarFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarFiltrosActionPerformed
        cbxPersonas.removeAllItems();
        tblHistorial.removeAll();
        try {
            cargarComboBoxPersonas();
            filtroComboBoxTipo();
        } catch (PersistenciaException ex) {
            mostrarMensaje(ex.getMessage());
        }
    }//GEN-LAST:event_btnAplicarFiltrosActionPerformed

    private void cbxTipoTramiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoTramiteActionPerformed

    }//GEN-LAST:event_cbxTipoTramiteActionPerformed

    /**
     * Combo box que sirve para seleccionar a la persona de la cual se desea
     * conocer el historial.
     *
     * @param evt el click que se le da al combo box.
     */
    private void cbxPersonasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPersonasActionPerformed
        //  personaSeleccionada = (Persona) cbxPersonas.getSelectedItem();
        filtroComboBoxTipo();
    }//GEN-LAST:event_cbxPersonasActionPerformed

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed
        try {
            casillasActivas();
        } catch (PersistenciaException ex) {
            Logger.getLogger(FrmHistorial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerarReporteActionPerformed

    /**
     * Casilla para poder escribir en el campo de texto del rfc.
     *
     * @param evt el click que se le da a la casilla.
     */
    private void jcbRfcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRfcActionPerformed
        if (jcbRfc.isSelected()) {
            txtRfc.setEnabled(true);
        } else {
            txtRfc.setEnabled(false);
        }
    }//GEN-LAST:event_jcbRfcActionPerformed

    /**
     * Casilla para poder escribir en el campo de texto de nombres.
     *
     * @param evt el click que se le da a la casilla.
     */
    private void jcbNombresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbNombresActionPerformed
        if (jcbNombres.isSelected()) {
            txtNombres.setEnabled(true);
        } else {
            txtNombres.setEnabled(false);
        }
    }//GEN-LAST:event_jcbNombresActionPerformed

    /**
     * Casilla para poder seleccionar una fecha de nacimiento.
     *
     * @param evt el click que se le da a la casilla.
     */
    private void jcbFechaNacimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFechaNacimientoActionPerformed
        if (jcbFechaNacimiento.isSelected()) {
            dtpFechaNacimiento.setEnabled(true);
        } else {
            dtpFechaNacimiento.setEnabled(false);
        }
    }//GEN-LAST:event_jcbFechaNacimientoActionPerformed

    /**
     * Botón que se encarga de filtrar los trámites por cierto periodo y tipo
     * cargandolos en la tabla.
     *
     * @param evt el click que se le da al botón.
     */
    private void btnFiltartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltartActionPerformed
        try {
            filtrarConsultasPeriodo();
        } catch (PersistenciaException ex) {
            mostrarMensaje(ex.getMessage());
        }
    }//GEN-LAST:event_btnFiltartActionPerformed

    private void jcbReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbReporteActionPerformed
        if (jcbReporte.isSelected()) {
            btnAplicarFiltros.setEnabled(false);
            cbxPersonas.setEnabled(false);
            txtNombresReporte.setEnabled(true);
            jPanelFondoReporte.setVisible(true);
            lblHistorialSolicitudes.setText("Reporte de trámites realizados");
        } else {
            btnAplicarFiltros.setEnabled(true);
            cbxPersonas.setEnabled(true);
            txtNombresReporte.setEnabled(false);
            jPanelFondoReporte.setVisible(false);
            lblHistorialSolicitudes.setText("Historial de solicitudes");
        }
    }//GEN-LAST:event_jcbReporteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAplicarFiltros;
    private javax.swing.JButton btnFiltart;
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<Persona> cbxPersonas;
    private javax.swing.JComboBox<String> cbxTipoTramite;
    private com.github.lgooddatepicker.components.DatePicker dptFechaHasta;
    private com.github.lgooddatepicker.components.DatePicker dtpFechaDe;
    private com.github.lgooddatepicker.components.DatePicker dtpFechaNacimiento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBarra;
    private javax.swing.JPanel jPanelFondoMenu;
    private javax.swing.JPanel jPanelFondoReporte;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBarMenu;
    private javax.swing.JCheckBox jcbFechaNacimiento;
    private javax.swing.JCheckBox jcbNombres;
    private javax.swing.JCheckBox jcbReporte;
    private javax.swing.JCheckBox jcbRfc;
    private javax.swing.JLabel lblBuscar1;
    private javax.swing.JLabel lblDe;
    private javax.swing.JLabel lblFiltroFecha;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblHistorial;
    private javax.swing.JLabel lblHistorialSolicitudes;
    private javax.swing.JLabel lblHistorialSolicitudes1;
    private javax.swing.JLabel lblListaPersonas;
    private javax.swing.JLabel lblNombresReporte;
    private javax.swing.JLabel lblTipoTramite;
    private javax.swing.JTable tblHistorial;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtNombresReporte;
    private javax.swing.JTextField txtRfc;
    // End of variables declaration//GEN-END:variables
}
